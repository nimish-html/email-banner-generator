This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
public/
  file.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
src/
  app/
    builder/
      BannerGallery.tsx
      BannerGeneratorForm.tsx
      EmailEditor.tsx
      page.tsx
    AuthForm.tsx
    globals.css
    layout.tsx
    page.tsx
  hooks/
    useUser.ts
  lib/
    supabase/
      client.ts
      server.ts
    supabaseClient.ts
supabase/
  functions/
    _shared/
      cors.ts
    generate_banner/
      index.ts
  .gitignore
  config.toml
.gitignore
eslint.config.mjs
middleware.ts
next.config.js
next.config.ts
package.json
postcss.config.mjs
PRD.md
README.md
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="src/app/builder/BannerGallery.tsx">
"use client";

import { useState, useEffect, useCallback } from 'react';
import { createClient } from '@/lib/supabase/client';
import type { User } from '@supabase/supabase-js';

interface BannerGalleryProps {
  user: User;
}

interface Banner {
  id: string;
  user_id: string;
  prompt_details: any;
  input_image_url: string;
  generated_urls: string[];
  created_at: string;
}

export default function BannerGallery({ user }: BannerGalleryProps) {
  const supabase = createClient();
  const [banners, setBanners] = useState<Banner[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchBanners = useCallback(async () => {
    setIsLoading(true);
    setError(null);
    try {
      const { data, error } = await supabase
        .from('banners')
        .select('*')
        .eq('user_id', user.id)
        .order('created_at', { ascending: false });

      if (error) throw error;

      setBanners(data || []);
    } catch (error: any) {
      console.error('Error fetching banners:', error);
      setError(`Failed to load banners: ${error.message}`);
      setBanners([]); // Clear banners on error
    } finally {
      setIsLoading(false);
    }
  }, [supabase, user.id]);

  useEffect(() => {
    fetchBanners();

    // Optional: Set up a listener for real-time updates if needed
    // const channel = supabase
    //   .channel('realtime banners')
    //   .on('postgres_changes', { event: 'INSERT', schema: 'public', table: 'banners', filter: `user_id=eq.${user.id}` }, payload => {
    //     console.log('New banner inserted:', payload);
    //     fetchBanners(); // Refetch on new banner insertion
    //   })
    //   .subscribe();

    // return () => {
    //   supabase.removeChannel(channel);
    // };

  }, [fetchBanners]);

  // TODO: Add a way to trigger fetchBanners from BannerGeneratorForm upon successful generation

  return (
    <div className="p-4 border rounded-lg shadow-sm bg-white min-h-[200px]">
      {isLoading && <p className="text-center text-gray-500">Loading banners...</p>}
      {error && <p className="text-center text-red-600">{error}</p>}
      {!isLoading && !error && banners.length === 0 && (
        <p className="text-center text-gray-500">No banners generated yet. Use the form to create some!</p>
      )}
      {!isLoading && !error && banners.length > 0 && (
        <div className="grid grid-cols-2 sm:grid-cols-3 gap-4">
          {banners.map((banner) => (
            banner.generated_urls.map((url, index) => (
              <div key={`${banner.id}-${index}`} className="aspect-[16/9] border rounded overflow-hidden group relative">
                 {/* eslint-disable-next-line @next/next/no-img-element */}
                <img
                  src={url}
                  alt={`Generated Banner ${index + 1}`}
                  className="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
                  // Add draggable attribute for EmailEditor integration
                  draggable="true"
                  onDragStart={(e) => {
                    e.dataTransfer.setData('text/plain', url); // Set data to be the image URL
                  }}
                />
                {/* Optional: Add overlay or download button on hover */}
              </div>
            ))
          ))}
        </div>
      )}
    </div>
  );
}
</file>

<file path="src/app/builder/BannerGeneratorForm.tsx">
"use client";

import { useState } from 'react';
import { createClient } from '@/lib/supabase/client'; // Use client component helper
import type { User } from '@supabase/supabase-js';

interface BannerGeneratorFormProps {
  user: User;
}

// Placeholder JSON structure for prompt details
const defaultPromptDetails = {
  theme: "Modern E-commerce",
  style: "Clean and vibrant",
  callToAction: "Shop Now!",
  additionalNotes: "Focus on product quality."
};

export default function BannerGeneratorForm({ user }: BannerGeneratorFormProps) {
  const supabase = createClient();
  const [promptDetails, setPromptDetails] = useState(JSON.stringify(defaultPromptDetails, null, 2));
  const [uploadedImageUrl, setUploadedImageUrl] = useState<string | null>(null);
  const [isUploading, setIsUploading] = useState(false);
  const [isGenerating, setIsGenerating] = useState(false);
  const [uploadError, setUploadError] = useState<string | null>(null);
  const [generateError, setGenerateError] = useState<string | null>(null);

  const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    // Basic validation (can be expanded based on PRD Step 7)
    if (file.size > 20 * 1024 * 1024) { // 20MB limit
        setUploadError("File size exceeds 20MB limit.");
        return;
    }
    if (!['image/png', 'image/jpeg', 'image/jpg'].includes(file.type)) {
        setUploadError("Invalid file type. Please upload PNG, JPG, or JPEG.");
        return;
    }

    setUploadError(null);
    setIsUploading(true);

    const filePath = `product-images/${user.id}/${Date.now()}_${file.name}`;

    try {
      const { data, error } = await supabase.storage
        .from('product-images') // Use 'product-images' bucket as per PRD
        .upload(filePath, file);

      if (error) throw error;

      // Get public URL (or signed URL if bucket isn't public - needs adjustment)
      // Assuming 'product-images' might need signed URLs for the edge function
      // For simplicity now, let's try to get a temporary public URL if possible or handle signed URL generation.
      // NOTE: The edge function needs access to this image. If the bucket is private,
      // we might need to generate a signed URL here and pass that, or adjust bucket permissions.
      // Let's assume for now the edge function *can* access it via service key, but this needs verification.
      const { data: urlData } = supabase.storage.from('product-images').getPublicUrl(data.path);
      setUploadedImageUrl(urlData.publicUrl);

    } catch (error: any) {
      console.error('Error uploading image:', error);
      setUploadError(`Upload failed: ${error.message}`);
      setUploadedImageUrl(null);
    } finally {
      setIsUploading(false);
    }
  };

  const handleGenerate = async () => {
    if (!uploadedImageUrl || !user) {
        setGenerateError("Please upload an image first.");
        return;
    }

    let parsedPromptDetails;
    try {
        parsedPromptDetails = JSON.parse(promptDetails);
    } catch (e) {
        setGenerateError("Invalid JSON format in prompt details.");
        return;
    }

    setGenerateError(null);
    setIsGenerating(true);

    try {
        const { data, error } = await supabase.functions.invoke('generate_banner', {
            body: {
                user_id: user.id,
                prompt_details: parsedPromptDetails,
                input_image_url: uploadedImageUrl // Pass the URL obtained after upload
            }
        });

        if (error) throw error;

        console.log('Generated Banners:', data);
        // TODO: Add logic to refresh the BannerGallery component
        alert('Banners generated successfully! Check the gallery.'); // Simple feedback for now

    } catch (error: any) {
        console.error('Error generating banners:', error);
        setGenerateError(`Generation failed: ${error.message}. Please try again.`);
    } finally {
        setIsGenerating(false);
    }
  };

  return (
    <div className="space-y-4 p-4 border rounded-lg shadow-sm bg-white">
      {/* File Upload */}
      <div>
        <label htmlFor="productImage" className="block text-sm font-medium text-gray-700 mb-1">Upload Product Image/Logo (.png, .jpg, max 20MB)</label>
        <input
          id="productImage"
          type="file"
          accept=".png, .jpg, .jpeg"
          onChange={handleFileChange}
          disabled={isUploading || isGenerating}
          className="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100 disabled:opacity-50"
        />
        {isUploading && <p className="text-sm text-blue-600 mt-1">Uploading...</p>}
        {uploadError && <p className="text-sm text-red-600 mt-1">{uploadError}</p>}
        {uploadedImageUrl && (
          <div className="mt-2">
            <p className="text-sm text-green-600">Image uploaded successfully!</p>
            <img src={uploadedImageUrl} alt="Uploaded preview" className="mt-2 h-20 w-auto object-contain border rounded" />
          </div>
        )}
      </div>

      {/* Prompt Details */}
      <div>
        <label htmlFor="promptDetails" className="block text-sm font-medium text-gray-700 mb-1">Banner Prompt Details (JSON)</label>
        <textarea
          id="promptDetails"
          rows={6}
          value={promptDetails}
          onChange={(e) => setPromptDetails(e.target.value)}
          disabled={isGenerating}
          className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm font-mono disabled:opacity-50 disabled:bg-gray-50"
          placeholder='Enter banner design details as JSON...' />
      </div>

      {/* Generate Button */}
      <button
        onClick={handleGenerate}
        disabled={!uploadedImageUrl || isUploading || isGenerating}
        className="w-full inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
      >
        {isGenerating ? 'Generating...' : 'Generate Banners'}
      </button>
      {generateError && <p className="text-sm text-red-600 mt-1 text-center">{generateError}</p>}

    </div>
  );
}
</file>

<file path="src/app/builder/EmailEditor.tsx">
"use client";

import { useState, useRef, DragEvent } from 'react';

interface EmailBlock {
  id: string;
  type: 'image' | 'text';
  content: string;
}

export default function EmailEditor() {
  const [blocks, setBlocks] = useState<EmailBlock[]>([]);
  const [isDraggingOver, setIsDraggingOver] = useState(false);
  const editorRef = useRef<HTMLDivElement>(null);

  const handleDragOver = (e: DragEvent<HTMLDivElement>) => {
    e.preventDefault(); // Necessary to allow dropping
    setIsDraggingOver(true);
  };

  const handleDragLeave = (e: DragEvent<HTMLDivElement>) => {
    // Check if the leave event is transitioning outside the editor bounds
    if (editorRef.current && !editorRef.current.contains(e.relatedTarget as Node)) {
      setIsDraggingOver(false);
    }
  };

  const handleDrop = (e: DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    setIsDraggingOver(false);
    const imageUrl = e.dataTransfer.getData('text/plain');

    if (imageUrl) {
      const newBlock: EmailBlock = {
        id: `block-${Date.now()}`,
        type: 'image',
        content: imageUrl,
      };
      setBlocks([...blocks, newBlock]);
    }
  };

  const generateHtml = () => {
    let html = '<!DOCTYPE html><html><head><style>img { max-width: 100%; height: auto; display: block; margin-bottom: 10px; }</style></head><body>';
    blocks.forEach(block => {
      if (block.type === 'image') {
        html += `<img src="${block.content}" alt="Banner Image">`;
      }
      // Add text block handling later if needed
    });
    html += '</body></html>';
    return html;
  };

  const handleExportHtml = () => {
    const htmlContent = generateHtml();
    const blob = new Blob([htmlContent], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'email-template.html';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="space-y-4">
      <div
        ref={editorRef}
        onDragOver={handleDragOver}
        onDragLeave={handleDragLeave}
        onDrop={handleDrop}
        className={`min-h-[300px] border-2 border-dashed rounded-lg p-4 transition-colors duration-200 ${isDraggingOver ? 'border-blue-500 bg-blue-50' : 'border-gray-300 bg-gray-50'}`}
      >
        <p className={`text-center text-gray-500 ${blocks.length > 0 ? 'mb-4' : ''}`}>
          {isDraggingOver ? 'Drop image here!' : 'Drag banners from the gallery above and drop them here.'}
        </p>
        <div className="space-y-2">
          {blocks.map(block => (
            <div key={block.id}>
              {block.type === 'image' && (
                 {/* eslint-disable-next-line @next/next/no-img-element */}
                <img src={block.content} alt="Email Banner" className="max-w-full h-auto rounded shadow" />
              )}
              {/* Render text blocks here if implemented */}
            </div>
          ))}
        </div>
      </div>
      {blocks.length > 0 && (
          <button
            onClick={handleExportHtml}
            className="w-full mt-4 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
          >
            Export Email HTML
          </button>
      )}
    </div>
  );
}
</file>

<file path="src/app/builder/page.tsx">
export const runtime = 'nodejs';

import { createClient } from '@/lib/supabase/server';
import { cookies } from 'next/headers';
import { redirect } from 'next/navigation';
import BannerGeneratorForm from './BannerGeneratorForm';
import BannerGallery from './BannerGallery';
import EmailEditor from './EmailEditor'; // Added based on PRD Step 5.6

export default async function BuilderPage() {
  const cookieStore = cookies();
  const supabase = createClient(cookieStore);

  const { data: { user } } = await supabase.auth.getUser();

  // If no user, redirect to the login page
  if (!user) {
    redirect('/');
  }

  return (
    <main className="container mx-auto px-4 py-8">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold">Create Promotional Banners</h1>
        {/* Add Logout Button or User Info Here Later */}
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        <div>
          <h2 className="text-xl font-semibold mb-4">1. Generate Banners</h2>
          <BannerGeneratorForm user={user} />
        </div>
        <div>
          <h2 className="text-xl font-semibold mb-4">2. Your Banner Gallery</h2>
          <BannerGallery user={user} />
        </div>
      </div>

      <div className="mt-12">
        <h2 className="text-xl font-semibold mb-4">3. Build Your Email</h2>
        <EmailEditor />
      </div>
    </main>
  );
}
</file>

<file path="src/app/AuthForm.tsx">
"use client";

import { Auth } from '@supabase/auth-ui-react';
import { ThemeSupa } from '@supabase/auth-ui-shared';
import { createClient } from '@/lib/supabase/client'; // Use the client helper

export default function AuthForm() {
  const supabase = createClient(); // Initialize client-side Supabase client

  return (
    <Auth
      supabaseClient={supabase}
      appearance={{ theme: ThemeSupa }}
      theme="dark"
      providers={['github']} // Example: Add providers if needed, e.g., ['github', 'google']
      redirectTo={`${process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000'}/auth/callback`} // Ensure you have this route handler set up if using OAuth
    />
  );
}
</file>

<file path="src/hooks/useUser.ts">
"use client";
import { useSession, useSupabaseClient } from "@supabase/auth-helpers-react";

export const useUser = () => {
  const session = useSession();
  const supa = useSupabaseClient();
  return { user: session?.user, supa };
};
</file>

<file path="src/lib/supabase/client.ts">
// src/lib/supabase/client.ts
import { createBrowserClient } from '@supabase/ssr'

export function createClient() {
  // Create a supabase client on the browser with project's credentials
  return createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  )
}
</file>

<file path="src/lib/supabase/server.ts">
// src/lib/supabase/server.ts
import { join } from 'path';
import { createServerClient, type CookieOptions } from '@supabase/ssr'
import { cookies } from 'next/headers'

export function createClient(cookieStore: ReturnType<typeof cookies>) {
  // Note: Ensure this runs in Node.js runtime so process.env is accessible.

  // Create a server-side Supabase client with the provided cookieStore
  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name: string) {
          return cookieStore.get(name)?.value
        },
        set(name: string, value: string, options: CookieOptions) {
          try {
            cookieStore.set({ name, value, ...options })
          } catch (error) {
            // The `set` method was called from a Server Component.
            // This can be ignored if you have middleware refreshing
            // user sessions.
          }
        },
        remove(name: string, options: CookieOptions) {
          try {
            // The `remove` method throws an error when called from a Server Component.
            // This can be ignored if you have middleware refreshing user sessions.
            // Ref: https://github.com/supabase/ssr/issues/61
            cookieStore.set({ name, value: '', ...options })
          } catch (error) {
            // The `delete` method was called from a Server Component.
            // This can be ignored if you have middleware refreshing
            // user sessions.
          }
        },
      },
    }
  )
}
</file>

<file path="src/lib/supabaseClient.ts">
import { createClient } from "@supabase/supabase-js";

export const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
);
</file>

<file path="supabase/functions/_shared/cors.ts">
export const corsHeaders = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  }
</file>

<file path="supabase/functions/generate_banner/index.ts">
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";
import OpenAI from "https://esm.sh/openai@4.29.1";
import { corsHeaders } from '../_shared/cors.ts'

console.log("generate_banner function started");

serve(async (req) => {
  // This is needed if you're planning to invoke your function from a browser.
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const { user_id, prompt_details, input_image_url } = await req.json();
    console.log("Received request:", { user_id, prompt_details, input_image_url });

    // 1. Validate input
    if (!user_id || !prompt_details || !input_image_url) {
      console.error("Missing required fields");
      return new Response(JSON.stringify({ error: "Missing required fields" }), {
        headers: { ...corsHeaders, "Content-Type": "application/json" },
        status: 400,
      });
    }

    // 2. Call OpenAI
    const openaiApiKey = Deno.env.get("OPENAI_API_KEY");
    if (!openaiApiKey) {
        console.error("OPENAI_API_KEY not set");
        return new Response(JSON.stringify({ error: "Server configuration error" }), {
            headers: { ...corsHeaders, "Content-Type": "application/json" },
            status: 500,
        });
    }
    const openai = new OpenAI({ apiKey: openaiApiKey });

    console.log("Calling OpenAI...");
    const imageGenerationResponse = await openai.images.generate({
      model: "dall-e-3", // Using dall-e-3 as gpt-image-1 is not a standard model name
      prompt: JSON.stringify(prompt_details), // Consider refining the prompt structure
      n: 1, // Generating 1 image as per Dall-E 3 limitations in API
      size: "1024x1024", // Using a standard Dall-E 3 size
      response_format: "b64_json",
    });
    console.log("OpenAI response received");

    const generatedUrls: string[] = [];
    const supabaseUrl = Deno.env.get("SUPABASE_URL");
    const supabaseServiceKey = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY");

    if (!supabaseUrl || !supabaseServiceKey) {
      console.error("Supabase environment variables not set");
      return new Response(JSON.stringify({ error: "Server configuration error" }), {
        headers: { ...corsHeaders, "Content-Type": "application/json" },
        status: 500,
      });
    }

    const supabase = createClient(supabaseUrl, supabaseServiceKey);

    for (const [i, imageData] of imageGenerationResponse.data.entries()) {
      if (!imageData.b64_json) {
        console.error("No b64_json found in OpenAI response item");
        continue; // Skip this item
      }
      const buffer = Uint8Array.from(atob(imageData.b64_json), c => c.charCodeAt(0));
      const filePath = `banner-images/${user_id}/${Date.now()}_${i}.png`;

      // 3. Upload to Supabase Storage
      console.log(`Uploading image to ${filePath}...`);
      const { error: uploadError } = await supabase.storage
        .from("banner-images")
        .upload(filePath, buffer, { contentType: "image/png", upsert: true });

      if (uploadError) {
        console.error("Supabase storage upload error:", uploadError);
        // Decide if we should stop or continue
        return new Response(JSON.stringify({ error: `Failed to upload image: ${uploadError.message}` }), {
            headers: { ...corsHeaders, "Content-Type": "application/json" },
            status: 500,
        });
      }
      console.log("Image uploaded successfully");

      const { data: publicUrlData } = supabase
        .storage
        .from("banner-images")
        .getPublicUrl(filePath);

       if (!publicUrlData || !publicUrlData.publicUrl) {
         console.error("Failed to get public URL for:", filePath);
         // Decide if we should stop or continue
         return new Response(JSON.stringify({ error: "Failed to get public URL for generated image" }), {
             headers: { ...corsHeaders, "Content-Type": "application/json" },
             status: 500,
         });
       }
      generatedUrls.push(publicUrlData.publicUrl);
      console.log(`Public URL obtained: ${publicUrlData.publicUrl}`);
    }

    // 4. Insert metadata into 'banners' table
    console.log("Inserting banner metadata into DB...");
    const { error: insertError } = await supabase
      .from("banners")
      .insert({ user_id, prompt_details, input_image_url, generated_urls: generatedUrls });

    if (insertError) {
      console.error("Supabase DB insert error:", insertError);
      return new Response(JSON.stringify({ error: `Failed to save banner metadata: ${insertError.message}` }), {
        headers: { ...corsHeaders, "Content-Type": "application/json" },
        status: 500,
      });
    }
    console.log("Banner metadata inserted successfully");

    return new Response(JSON.stringify({ urls: generatedUrls }), {
      headers: { ...corsHeaders, "Content-Type": "application/json" },
      status: 200,
    });

  } catch (error) {
    console.error("Unhandled error:", error);
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { ...corsHeaders, "Content-Type": "application/json" },
      status: 500,
    });
  }
});

console.log("generate_banner function deployed and listening");
</file>

<file path="supabase/.gitignore">
# Supabase
.branches
.temp

# dotenvx
.env.keys
.env.local
.env.*.local
</file>

<file path="supabase/config.toml">
# For detailed configuration reference documentation, visit:
# https://supabase.com/docs/guides/local-development/cli/config
# A string used to distinguish different Supabase projects on the same host. Defaults to the
# working directory name when running `supabase init`.
project_id = "nextjs14-app"

[api]
enabled = true
# Port to use for the API URL.
port = 54321
# Schemas to expose in your API. Tables, views and stored procedures in this schema will get API
# endpoints. `public` and `graphql_public` schemas are included by default.
schemas = ["public", "graphql_public"]
# Extra schemas to add to the search_path of every request.
extra_search_path = ["public", "extensions"]
# The maximum number of rows returns from a view, table, or stored procedure. Limits payload size
# for accidental or malicious requests.
max_rows = 1000

[api.tls]
# Enable HTTPS endpoints locally using a self-signed certificate.
enabled = false

[db]
# Port to use for the local database URL.
port = 54322
# Port used by db diff command to initialize the shadow database.
shadow_port = 54320
# The database major version to use. This has to be the same as your remote database's. Run `SHOW
# server_version;` on the remote database to check.
major_version = 15

[db.pooler]
enabled = false
# Port to use for the local connection pooler.
port = 54329
# Specifies when a server connection can be reused by other clients.
# Configure one of the supported pooler modes: `transaction`, `session`.
pool_mode = "transaction"
# How many server connections to allow per user/database pair.
default_pool_size = 20
# Maximum number of client connections allowed.
max_client_conn = 100

[db.seed]
# If enabled, seeds the database after migrations during a db reset.
enabled = true
# Specifies an ordered list of seed files to load during db reset.
# Supports glob patterns relative to supabase directory: "./seeds/*.sql"
sql_paths = ["./seed.sql"]

[realtime]
enabled = true
# Bind realtime via either IPv4 or IPv6. (default: IPv4)
# ip_version = "IPv6"
# The maximum length in bytes of HTTP request headers. (default: 4096)
# max_header_length = 4096

[studio]
enabled = true
# Port to use for Supabase Studio.
port = 54323
# External URL of the API server that frontend connects to.
api_url = "http://127.0.0.1"
# OpenAI API Key to use for Supabase AI in the Supabase Studio.
openai_api_key = "env(OPENAI_API_KEY)"

# Email testing server. Emails sent with the local dev setup are not actually sent - rather, they
# are monitored, and you can view the emails that would have been sent from the web interface.
[inbucket]
enabled = true
# Port to use for the email testing server web interface.
port = 54324
# Uncomment to expose additional ports for testing user applications that send emails.
# smtp_port = 54325
# pop3_port = 54326
# admin_email = "admin@email.com"
# sender_name = "Admin"

[storage]
enabled = true
# The maximum file size allowed (e.g. "5MB", "500KB").
file_size_limit = "50MiB"

# Image transformation API is available to Supabase Pro plan.
# [storage.image_transformation]
# enabled = true

# Uncomment to configure local storage buckets
# [storage.buckets.images]
# public = false
# file_size_limit = "50MiB"
# allowed_mime_types = ["image/png", "image/jpeg"]
# objects_path = "./images"

[auth]
enabled = true
# The base URL of your website. Used as an allow-list for redirects and for constructing URLs used
# in emails.
site_url = "http://localhost:3000"
# A list of *exact* URLs that auth providers are permitted to redirect to post authentication.
additional_redirect_urls = ["https://127.0.0.1:3000"]
# How long tokens are valid for, in seconds. Defaults to 3600 (1 hour), maximum 604,800 (1 week).
jwt_expiry = 3600
# If disabled, the refresh token will never expire.
enable_refresh_token_rotation = true
# Allows refresh tokens to be reused after expiry, up to the specified interval in seconds.
# Requires enable_refresh_token_rotation = true.
refresh_token_reuse_interval = 10
# Allow/disallow new user signups to your project.
enable_signup = true
# Allow/disallow anonymous sign-ins to your project.
enable_anonymous_sign_ins = false
# Allow/disallow testing manual linking of accounts
enable_manual_linking = false
# Passwords shorter than this value will be rejected as weak. Minimum 6, recommended 8 or more.
minimum_password_length = 6
# Passwords that do not meet the following requirements will be rejected as weak. Supported values
# are: `letters_digits`, `lower_upper_letters_digits`, `lower_upper_letters_digits_symbols`
password_requirements = ""

[auth.email]
# Allow/disallow new user signups via email to your project.
enable_signup = true
# If enabled, a user will be required to confirm any email change on both the old, and new email
# addresses. If disabled, only the new email is required to confirm.
double_confirm_changes = true
# If enabled, users need to confirm their email address before signing in.
enable_confirmations = true
# If enabled, users will need to reauthenticate or have logged in recently to change their password.
secure_password_change = false
# Controls the minimum amount of time that must pass before sending another signup confirmation or password reset email.
max_frequency = "1m0s"
# Number of characters used in the email OTP.
otp_length = 6
# Number of seconds before the email OTP expires (defaults to 1 hour).
otp_expiry = 3600

# Use a production-ready SMTP server
# [auth.email.smtp]
# enabled = true
# host = "smtp.sendgrid.net"
# port = 587
# user = "apikey"
# pass = "env(SENDGRID_API_KEY)"
# admin_email = "admin@email.com"
# sender_name = "Admin"

# Uncomment to customize email template
# [auth.email.template.invite]
# subject = "You have been invited"
# content_path = "./supabase/templates/invite.html"

[auth.sms]
# Allow/disallow new user signups via SMS to your project.
enable_signup = false
# If enabled, users need to confirm their phone number before signing in.
enable_confirmations = false
# Template for sending OTP to users
template = "Your code is {{ .Code }}"
# Controls the minimum amount of time that must pass before sending another sms otp.
max_frequency = "5s"

# Use pre-defined map of phone number to OTP for testing.
# [auth.sms.test_otp]
# 4152127777 = "123456"

# Configure logged in session timeouts.
# [auth.sessions]
# Force log out after the specified duration.
# timebox = "24h"
# Force log out if the user has been inactive longer than the specified duration.
# inactivity_timeout = "8h"

# This hook runs before a token is issued and allows you to add additional claims based on the authentication method used.
# [auth.hook.custom_access_token]
# enabled = true
# uri = "pg-functions://<database>/<schema>/<hook_name>"

# Configure one of the supported SMS providers: `twilio`, `twilio_verify`, `messagebird`, `textlocal`, `vonage`.
[auth.sms.twilio]
enabled = false
account_sid = ""
message_service_sid = ""
# DO NOT commit your Twilio auth token to git. Use environment variable substitution instead:
auth_token = "env(SUPABASE_AUTH_SMS_TWILIO_AUTH_TOKEN)"

# Multi-factor-authentication is available to Supabase Pro plan.
[auth.mfa]
# Control how many MFA factors can be enrolled at once per user.
max_enrolled_factors = 10

# Control MFA via App Authenticator (TOTP)
[auth.mfa.totp]
enroll_enabled = false
verify_enabled = false

# Configure MFA via Phone Messaging
[auth.mfa.phone]
enroll_enabled = false
verify_enabled = false
otp_length = 6
template = "Your code is {{ .Code }}"
max_frequency = "5s"

# Configure MFA via WebAuthn
# [auth.mfa.web_authn]
# enroll_enabled = true
# verify_enabled = true

# Use an external OAuth provider. The full list of providers are: `apple`, `azure`, `bitbucket`,
# `discord`, `facebook`, `github`, `gitlab`, `google`, `keycloak`, `linkedin_oidc`, `notion`, `twitch`,
# `twitter`, `slack`, `spotify`, `workos`, `zoom`.
[auth.external.apple]
enabled = false
client_id = ""
# DO NOT commit your OAuth provider secret to git. Use environment variable substitution instead:
secret = "env(SUPABASE_AUTH_EXTERNAL_APPLE_SECRET)"
# Overrides the default auth redirectUrl.
redirect_uri = ""
# Overrides the default auth provider URL. Used to support self-hosted gitlab, single-tenant Azure,
# or any other third-party OIDC providers.
url = ""
# If enabled, the nonce check will be skipped. Required for local sign in with Google auth.
skip_nonce_check = false

# Use Firebase Auth as a third-party provider alongside Supabase Auth.
[auth.third_party.firebase]
enabled = false
# project_id = "my-firebase-project"

# Use Auth0 as a third-party provider alongside Supabase Auth.
[auth.third_party.auth0]
enabled = false
# tenant = "my-auth0-tenant"
# tenant_region = "us"

# Use AWS Cognito (Amplify) as a third-party provider alongside Supabase Auth.
[auth.third_party.aws_cognito]
enabled = false
# user_pool_id = "my-user-pool-id"
# user_pool_region = "us-east-1"

[edge_runtime]
enabled = true
# Configure one of the supported request policies: `oneshot`, `per_worker`.
# Use `oneshot` for hot reload, or `per_worker` for load testing.
policy = "oneshot"
# Port to attach the Chrome inspector for debugging edge functions.
inspector_port = 8083

# Use these configurations to customize your Edge Function.
# [functions.MY_FUNCTION_NAME]
# enabled = true
# verify_jwt = true
# import_map = "./functions/MY_FUNCTION_NAME/deno.json"
# Uncomment to specify a custom file path to the entrypoint.
# Supported file extensions are: .ts, .js, .mjs, .jsx, .tsx
# entrypoint = "./functions/MY_FUNCTION_NAME/index.ts"
# Specifies static files to be bundled with the function. Supports glob patterns.
# For example, if you want to serve static HTML pages in your function:
# static_files = [ "./functions/MY_FUNCTION_NAME/*.html" ]

[analytics]
enabled = true
port = 54327
# Configure one of the supported backends: `postgres`, `bigquery`.
backend = "postgres"

# Experimental features may be deprecated any time
[experimental]
# Configures Postgres storage engine to use OrioleDB (S3)
orioledb_version = ""
# Configures S3 bucket URL, eg. <bucket_name>.s3-<region>.amazonaws.com
s3_host = "env(S3_HOST)"
# Configures S3 bucket region, eg. us-east-1
s3_region = "env(S3_REGION)"
# Configures AWS_ACCESS_KEY_ID for S3 bucket
s3_access_key = "env(S3_ACCESS_KEY)"
# Configures AWS_SECRET_ACCESS_KEY for S3 bucket
s3_secret_key = "env(S3_SECRET_KEY)"
</file>

<file path="middleware.ts">
// middleware.ts
import { createServerClient, type CookieOptions } from '@supabase/ssr'
import { NextResponse, type NextRequest } from 'next/server'

export async function middleware(request: NextRequest) {
  let response = NextResponse.next({
    request: {
      headers: request.headers,
    },
  })

  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name: string) {
          return request.cookies.get(name)?.value
        },
        set(name: string, value: string, options: CookieOptions) {
          request.cookies.set({
            name,
            value,
            ...options,
          })
          response = NextResponse.next({
            request: {
              headers: request.headers,
            },
          })
          response.cookies.set({
            name,
            value,
            ...options,
          })
        },
        remove(name: string, options: CookieOptions) {
          request.cookies.set({
            name,
            value: '',
            ...options,
          })
          response = NextResponse.next({
            request: {
              headers: request.headers,
            },
          })
          response.cookies.set({
            name,
            value: '',
            ...options,
          })
        },
      },
    }
  )

  // Refresh session if expired - required for Server Components
  // Note: This keeps the session active on the server-side.
  // For client-side redirection based on auth state, handle it within pages/layouts.
  await supabase.auth.getSession()

  return response
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * Feel free to modify this pattern to include more paths.
     */
    '/((?!_next/static|_next/image|favicon.ico|.*\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',
  ],
}
</file>

<file path="next.config.js">
/** @type {import('next').NextConfig} */
const nextConfig = {
};

module.exports = nextConfig;
</file>

<file path="PRD.md">
Product Requirements Document (PRD)  
Visual Email‐Banner Builder for E-Commerce

1. Overview  
We’re building a Next.js 14 App-Router application (“EmailBannerBuilder”) that lets logged-in merchants:  
• Upload a product image or brand logo  
• Enter a text description of the required banner  
• Hit “Generate” to get 3 custom landscape banners via OpenAI’s gpt-image-1 model  
• Store generated banners in Supabase Storage & metadata in Supabase Postgres  
• Drag-and-drop these banners into an email template  

Tech Stack  
• Frontend/Backend: Next.js 14 (App Router, React Server Components)  
• Auth/DB/Storage/Edge Functions: Supabase  
• Image Gen: OpenAI Images API (gpt-image-1)  

2. Goals & Success Criteria  
• 3× high-quality, brand-aligned banners per request  
• Secure user auth, isolation of banners by user  
• Simple API surface for image gen (via Supabase Edge Function)  
• Email template editor that can export HTML  

3. High-Level User Flow  
1. User signs up/logs in via Supabase Auth  
2. On “Create Banner” page: upload product image, enter text prompt  
3. Click “Generate” → client invokes Supabase Edge Function → calls OpenAI → stores images → returns URLs  
4. Client reads from “banners” table → displays gallery  
5. User drags banners into email blocks; exports email HTML  

4. Data Model  
Table: banners  
• id (uuid, pk)  
• user_id (uuid, fk→auth.users.id)  
• prompt_details (jsonb)  
• input_image_url (text)  
• generated_urls (text[] )  
• created_at (timestamp with time zone default now())  

Supabase Storage Buckets  
• product-images (public: false) – for user uploads  
• banner-images (public: true) – for generated banners  

5. Step-by-Step Implementation  

**[DONE]** Step 1 Configure Next.js & Supabase  
• npx create-next-app@latest --ts –-experimental-app  
• Install `@supabase/ssr`, `@supabase/supabase-js`  
• .env.local:  
  NEXT_PUBLIC_SUPABASE_URL=...  
  NEXT_PUBLIC_SUPABASE_ANON_KEY=...  
  SUPABASE_SERVICE_ROLE_KEY=...  
  OPENAI_API_KEY=...  

Step 2 Supabase DB Setup [DONE]
• Create project at app.supabase.com  
• Enable “Auth” (email/password)  
• Create buckets: product-images, banner-images  
• Create table “banners” via SQL:  
```sql
create table banners (
  id uuid default gen_random_uuid() primary key,
  user_id uuid references auth.users(id),
  prompt_details jsonb not null,
  input_image_url text not null,
  generated_urls text[] not null,
  created_at timestamptz default now()
);
```

**[DONE]** Step 3 Supabase Edge Function  
Location: supabase/functions/generate_banner/index.ts  

Pseudocode:  
```ts
import { serve } from "std/server";
import { createClient } from "@supabase/supabase-js";
import OpenAI from "openai";

serve(async (req) => {
  const { user_id, prompt_details, input_image_url } = await req.json();
  // 1. Validate
  if (!user_id || !prompt_details || !input_image_url) return new Response("400", { status: 400 });
  // 2. Call OpenAI
  const openai = new OpenAI({ apiKey: Deno.env.get("OPENAI_API_KEY") });
  const response = await openai.images.generate({
    model: "gpt-image-1",
    prompt: JSON.stringify(prompt_details),
    n: 3,
    size: "1024x1536"
  });
  const urls: string[] = [];
  for (const [i, data] of response.data.entries()) {
    const b64 = data.b64_json!;
    const buffer = Uint8Array.from(atob(b64), c => c.charCodeAt(0));
    const path = `banner-images/${user_id}/${Date.now()}_${i}.png`;
    // 3. Upload to Supabase Storage
    const supa = createClient(Deno.env.get("SUPABASE_URL")!, Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!);
    await supa.storage.from("banner-images").upload(path, buffer, { contentType: "image/png" });
    const publicUrl = supa
      .storage
      .from("banner-images")
      .getPublicUrl(path).data.publicUrl;
    urls.push(publicUrl!);
  }
  // 4. Insert metadata
  await supa
    .from("banners")
    .insert({ user_id, prompt_details, input_image_url, generated_urls: urls });
  return Response.json({ urls });
});
```

**[DONE]** Step 4 Next.js Library & Auth (@supabase/ssr approach)

*   **Middleware:** Create `middleware.ts` at the root.
    ```ts
    // middleware.ts
    import { createServerClient, type CookieOptions } from '@supabase/ssr'
    import { NextResponse, type NextRequest } from 'next/server'

    export async function middleware(request: NextRequest) {
      let response = NextResponse.next({
        request: {
          headers: request.headers,
        },
      })

      const supabase = createServerClient(
        process.env.NEXT_PUBLIC_SUPABASE_URL!,
        process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
        {
          cookies: {
            get(name: string) {
              return request.cookies.get(name)?.value
            },
            set(name: string, value: string, options: CookieOptions) {
              request.cookies.set({
                name,
                value,
                ...options,
              })
              response = NextResponse.next({
                request: {
                  headers: request.headers,
                },
              })
              response.cookies.set({
                name,
                value,
                ...options,
              })
            },
            remove(name: string, options: CookieOptions) {
              request.cookies.set({
                name,
                value: '',
                ...options,
              })
              response = NextResponse.next({
                request: {
                  headers: request.headers,
                },
              })
              response.cookies.set({
                name,
                value: '',
                ...options,
              })
            },
          },
        }
      )

      // Refresh session if expired - required for Server Components
      await supabase.auth.getSession()

      return response
    }

    export const config = {
      matcher: [
        /*
         * Match all request paths except for the ones starting with:
         * - _next/static (static files)
         * - _next/image (image optimization files)
         * - favicon.ico (favicon file)
         * Feel free to modify this pattern to include more paths.
         */
        '/((?!_next/static|_next/image|favicon.ico|.*\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',
      ],
    }
    ```

*   **Supabase Client Helpers:** Create utility functions to initialize Supabase clients for Server Components, Client Components, and Route Handlers.

    *   `src/lib/supabase/client.ts` (for Client Components)
        ```ts
        // src/lib/supabase/client.ts
        import { createBrowserClient } from '@supabase/ssr'

        export function createClient() {
          return createBrowserClient(
            process.env.NEXT_PUBLIC_SUPABASE_URL!,
            process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
          )
        }
        ```

    *   `src/lib/supabase/server.ts` (for Server Components & Route Handlers)
        ```ts
        // src/lib/supabase/server.ts
        import { createServerClient, type CookieOptions } from '@supabase/ssr'
        import { cookies } from 'next/headers'

        export function createClient() {
          const cookieStore = cookies()

          return createServerClient(
            process.env.NEXT_PUBLIC_SUPABASE_URL!,
            process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
            {
              cookies: {
                get(name: string) {
                  return cookieStore.get(name)?.value
                },
                set(name: string, value: string, options: CookieOptions) {
                  try {
                    cookieStore.set({ name, value, ...options })
                  } catch (error) {
                    // The `set` method was called from a Server Component.
                    // This can be ignored if you have middleware refreshing
                    // user sessions.
                  }
                },
                remove(name: string, options: CookieOptions) {
                  try {
                    cookieStore.set({ name, value: '', ...options })
                  } catch (error) {
                    // The `delete` method was called from a Server Component.
                    // This can be ignored if you have middleware refreshing
                    // user sessions.
                  }
                },
              },
            }
          )
        }
        ```

*   **Auth UI (Optional but recommended):** Install `@supabase/auth-ui-react` and `@supabase/auth-ui-shared` for pre-built login/signup components.

Step 5 UI Components & Pages  

5.1 /app/layout.tsx  
• No longer requires `<SupabaseProvider>` or `<SessionContextProvider>`. Ensure `<html>` and `<body>` tags are present. Add global styles if needed.

5.2 /app/page.tsx  
• Landing page → redirect to /builder if logged in  

5.3 /app/builder/page.tsx  
```tsx
"use client";
import BannerGeneratorForm from "./BannerGeneratorForm";
import BannerGallery from "./BannerGallery";

export default function BuilderPage() {
  return (
    <main>
      <h1>Create Promotional Banners</h1>
      <BannerGeneratorForm />
      <BannerGallery />
    </main>
  );
}
```

5.4 BannerGeneratorForm.tsx  
• File input → onChange: upload to “product-images” bucket → get URL  
• Textarea for custom prompt (preloaded with JSON design object)  
• “Generate” button → calls:
```ts
const { data } = await supabaseClient.functions.invoke("generate_banner", {
  body: { user_id, prompt_details: designJson, input_image_url }
});
```
• Handle loading, errors  

5.5 BannerGallery.tsx  
• Fetch `/api/banners` or use supabase.from("banners").select()  
• Display fetched generated_urls as thumbnails  

5.6 EmailEditor.tsx  
• Simple drag-and-drop area: accept image URLs from gallery  
• Inline styling + export to HTML  

Step 6 Next.js API Routes (app/api)  
app/api/banners/route.ts  
```ts
import { NextResponse } from "next/server";
import { createClient } from "@/lib/supabase/server"; // Use server client
import { cookies } from 'next/headers'; // Import cookies

export async function GET(req: Request) {
  const cookieStore = cookies(); // Get cookie store
  const supabase = createClient(cookieStore); // Pass cookieStore

  // Get user session
  const { data: { user } } = await supabase.auth.getUser();

  if (!user) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  const { data, error } = await supabase
    .from("banners")
    .select("*")
    .eq("user_id", user.id)
    .order("created_at", { ascending: false });
  return NextResponse.json({ banners: data });
}
```

Step 7 Edge Cases & Error Handling  
• Auth: redirect unauthorized to /login  
• File uploads: limit to 20 MB, validate file type (.png, .jpg)  
• OpenAI errors: display retry option  
• Supabase storage errors: fallback & notify  
• Empty galleries: show placeholder  
• Rate-limit: disable “Generate” while pending  

6. File Structure  

.
├── .env.local  
├── next.config.ts  
├── package.json  
├── tsconfig.json  
├── supabase  
│   └── functions  
│       └── generate_banner  
│           └── index.ts  
├── src  
│   ├── app  
│   │   ├── layout.tsx  
│   │   ├── page.tsx  
│   │   └── builder  
│   │       ├── page.tsx  
│   │       ├── BannerGeneratorForm.tsx  
│   │       ├── BannerGallery.tsx  
│   │       └── EmailEditor.tsx  
│   ├── api  
│   │   └── banners  
│   │       └── route.ts  
│   ├── hooks  
│   │   └── useUser.ts  
│   ├── lib  
│   │   └── supabaseClient.ts  
│   └── utils  
│       └── designPrompt.json  ← contains the Valentine’s Day JSON  
└── README.md  

7. Sample designPrompt.json  
```json
{
  "design_type": "Valentine's Day sale promotional banners for e-commerce",
  "aesthetics": "Bold, modern, attention-grabbing with a focus on high contrast and strong hierarchy. Uses minimalistic product photography, typographic emphasis, and subtle themed backgrounds (e.g., hearts).",
  "primary_colors": [
    "deep red",
    "white",
    "black",
    "light gray"
  ],
  "additional_details": "Headlines use a bold, condensed sans-serif typeface with all caps, white letters for maximum contrast (e.g., 'SLEEP BETTER THIS VALENTINE’S DAY FOR 50% OFF.'). Subheadlines and supporting text are in smaller, regular sans-serif font (white). Button styles are horizontal, pill-shaped with solid white fill and black bold text, centered on banners. Product images are foregrounded, slightly overlapping, with a prominent '+' symbol between them. Text hierarchy is clear: headline (largest, boldest), followed by subheadline (smaller), then call-to-action (button). Informational icons are simple, monochrome white, with short explanatory text below each. Background is a rich red, sometimes with faint heart icons for the holiday theme."
}
```
When invoking generation, merge with user text:  
```ts
const prompt_details = {
  ...designPrompt,
  user_text: "Happy easter sale, buy stocks before they run out, 70% off on mouth tapes"
};
```

8. Testing & QA  
• Unit test Edge Function with valid/invalid payloads  
• Integration test generation flow (mock OpenAI)  
• E2E test builder page (Cypress/Playwright)  

9. Deployment  
• Deploy Next.js to Vercel  
• Deploy Supabase Edge Function via supabase CLI  
• Set env vars in Vercel & Supabase  

This PRD provides a developer-ready blueprint to implement the entire flow—from user auth, prompt input, image generation, storage, to email assembly—covering all edge cases and integration points.
</file>

<file path="public/file.svg">
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
</file>

<file path="public/globe.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>
</file>

<file path="public/next.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
</file>

<file path="public/vercel.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>
</file>

<file path="public/window.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>
</file>

<file path="src/app/globals.css">
@import "tailwindcss";

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family: Arial, Helvetica, sans-serif;
}
</file>

<file path="src/app/layout.tsx">
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Email Banner Builder",
  description: "Generate custom email banners with AI",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}
</file>

<file path="src/app/page.tsx">
import { createClient } from '@/lib/supabase/server';
import { redirect } from 'next/navigation';
import AuthForm from './AuthForm';
import { cookies } from 'next/headers';

export default async function Home() {
  const cookieStore = cookies();
  const supabase = createClient(cookieStore);

  const { data: { user } } = await supabase.auth.getUser();

  if (user) {
    redirect('/builder');
  }

  return (
    <div className="flex flex-col items-center justify-center min-h-screen py-2">
      <main className="flex flex-col items-center justify-center w-full flex-1 px-4 sm:px-20 text-center">
        <h1 className="text-4xl sm:text-6xl font-bold mb-8">
          Welcome to the Email Banner Builder
        </h1>
        <p className="mb-8 text-lg text-gray-600">
          Please sign in to continue
        </p>
        <div className="w-full max-w-md">
          <AuthForm />
        </div>
      </main>
    </div>
  );
}
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path="eslint.config.mjs">
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;
</file>

<file path="next.config.ts">
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;
</file>

<file path="package.json">
{
  "name": "nextjs14-app",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@supabase/auth-ui-react": "^0.4.7",
    "@supabase/auth-ui-shared": "^0.1.8",
    "@supabase/ssr": "^0.6.1",
    "@supabase/supabase-js": "^2.49.4",
    "dotenv": "^16.5.0",
    "next": "latest",
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "eslint": "^9",
    "eslint-config-next": "latest",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}
</file>

<file path="postcss.config.mjs">
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;
</file>

<file path="README.md">
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

</files>
